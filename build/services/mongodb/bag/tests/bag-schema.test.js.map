{"version":3,"sources":["../../../../../src/services/mongodb/bag/tests/bag-schema.test.js"],"names":["mongoDB","mongoose","connect","useNewUrlParser","useUnifiedTopology","info","clientId","amount","describe","beforeAll","Bag","deleteMany","afterEach","afterAll","connection","close","it","expect","toBeDefined","bag","save","find","foundBag","expected","actual","shift","toBe","savedBag"],"mappings":";;AAAA;;AACA;;;;;;;;AACA,IAAMA,OAAO,GAAG,yCAAhB;;AAEAC,qBAASC,OAAT,CAAiBF,OAAjB,EAA0B;AACxBG,EAAAA,eAAe,EAAE,IADO;AAExBC,EAAAA,kBAAkB,EAAE;AAFI,CAA1B;;AAKA,IAAMC,IAAI,GAAG;AACXC,EAAAA,QAAQ,EAAE,CADC;AAEXC,EAAAA,MAAM,EAAE;AAFG,CAAb;AAKAC,QAAQ,CAAC,+BAAD,EAAkC,YAAM;AAE9CC,EAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,mBAAIC,UAAJ,EADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAT;AAIAC,EAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFF,mBAAIC,UAAJ,EADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAT;AAIAE,EAAAA,QAAQ;AAAA;AAAA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDZ,qBAASa,UAAT,CAAoBC,KAApB,EADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAR;AAIAC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACP,kBAAD,CAAN,CAAYQ,WAAZ;AACD,GAFC,CAAF;AAIAV,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACrCQ,IAAAA,EAAE,CAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBG,cAAAA,GADsB,GAChB,IAAIT,kBAAJ,CAAQL,IAAR,CADgB;AAAA;AAAA,qBAEtBc,GAAG,CAACC,IAAJ,EAFsB;;AAAA;AAAA;AAAA,qBAILV,mBAAIW,IAAJ,CAAShB,IAAT,CAJK;;AAAA;AAItBiB,cAAAA,QAJsB;AAKtBC,cAAAA,QALsB,GAKX;AAAEjB,gBAAAA,QAAQ,EAAE,CAAZ;AAAeC,gBAAAA,MAAM,EAAE;AAAvB,eALW;AAMtBiB,cAAAA,MANsB,GAMbF,QAAQ,CAACG,KAAT,EANa;AAO5BR,cAAAA,MAAM,CAACO,MAAM,CAACjB,MAAR,CAAN,CAAsBmB,IAAtB,CAA2BH,QAAQ,CAAChB,MAApC;;AAP4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5B,GAAF;AASD,GAVO,CAAR;AAYAC,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACtCQ,IAAAA,EAAE,CAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,4BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBG,cAAAA,GADuB,GACjB,IAAIT,kBAAJ,CAAQL,IAAR,CADiB;AAAA;AAAA,qBAENc,GAAG,CAACC,IAAJ,EAFM;;AAAA;AAEvBO,cAAAA,QAFuB;AAGvBJ,cAAAA,QAHuB,GAGZ;AAAEjB,gBAAAA,QAAQ,EAAE,CAAZ;AAAeC,gBAAAA,MAAM,EAAE;AAAvB,eAHY;AAIvBiB,cAAAA,MAJuB,GAIdG,QAAQ,CAACpB,MAJK;AAK7BU,cAAAA,MAAM,CAACO,MAAD,CAAN,CAAeE,IAAf,CAAoBH,QAAQ,CAAChB,MAA7B;;AAL6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B,GAAF;AAOD,GARO,CAAR;AAUD,CAxCO,CAAR","sourcesContent":["import mongoose from 'mongoose'\nimport Bag from '../schema'\nconst mongoDB = 'mongodb://localhost:27017/bankinfo-test'\n\nmongoose.connect(mongoDB, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n})\n\nconst info = {\n  clientId: 1,\n  amount: 100\n}\n\ndescribe('User informations schema test', () => {\n  \n  beforeAll(async () => {\n    await Bag.deleteMany()\n  })\n\n  afterEach(async () => {\n    await Bag.deleteMany()\n  })\n\n  afterAll(async () => {\n    await mongoose.connection.close()\n  })\n\n  it('has a module', () => {\n    expect(Bag).toBeDefined()\n  })\n\n  describe('get bag informations', () => {   \n    it('gets a bag information ', async () => {\n      const bag = new Bag(info)\n      await bag.save()\n\n      const foundBag = await Bag.find(info)\n      const expected = { clientId: 1, amount: 100 }\n      const actual = foundBag.shift()\n      expect(actual.amount).toBe(expected.amount)\n    })\n  })\n\n  describe('save bag informations', () => {\n    it('saves a bag information ', async () => {\n      const bag = new Bag(info)\n      const savedBag = await bag.save()\n      const expected = { clientId: 1, amount: 100 }\n      const actual = savedBag.amount\n      expect(actual).toBe(expected.amount)\n    })\n  })\n\n})"],"file":"bag-schema.test.js"}