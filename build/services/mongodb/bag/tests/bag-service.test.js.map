{"version":3,"sources":["../../../../../src/services/mongodb/bag/tests/bag-service.test.js"],"names":["info","clientId","amount","describe","it","expect","BagService","toBeDefined","mock","find","sinon","spy","bagService","listBag","expected","actual","calledOnce","toBe","save","data","createBag"],"mappings":";;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAG;AACXC,EAAAA,QAAQ,EAAE,CADC;AAEXC,EAAAA,MAAM,EAAE;AAFG,CAAb;AAKAC,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,mBAAD,CAAN,CAAmBC,WAAnB;AACD,GAFC,CAAF;AAIAJ,EAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,UAAMI,IAAI,GAAG;AAAEC,QAAAA,IAAI,EAAEC,kBAAMC,GAAN;AAAR,OAAb;AACA,UAAMC,UAAU,GAAG,yBAAWJ,IAAX,CAAnB;AACAI,MAAAA,UAAU,CAACC,OAAX;AACA,UAAMC,QAAQ,GAAG,IAAjB;AACA,UAAMC,MAAM,GAAGP,IAAI,CAACC,IAAL,CAAUO,UAAzB;AACAX,MAAAA,MAAM,CAACU,MAAD,CAAN,CAAeE,IAAf,CAAoBH,QAApB;AACD,KAPC,CAAF;AAQD,GATO,CAAR;AAWAX,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,UAAMc,IAAI,GAAIR,kBAAMC,GAAN,EAAd;;AACA,UAAMH,IAAI,GAAI,SAARA,IAAQ,CAASW,IAAT,EAAe;AAC3B,iCACKA,IADL;AAEED,UAAAA,IAAI,EAAJA;AAFF;AAID,OALD;;AAMA,UAAMN,UAAU,GAAG,yBAAWJ,IAAX,CAAnB;AACAI,MAAAA,UAAU,CAACQ,SAAX,CAAqBpB,IAArB;AACA,UAAMe,MAAM,GAAGG,IAAI,CAACF,UAApB;AACAX,MAAAA,MAAM,CAACU,MAAD,CAAN,CAAeE,IAAf,CAAoB,IAApB;AACD,KAZC,CAAF;AAcD,GAfO,CAAR;AAgBD,CAhCO,CAAR","sourcesContent":["import BagService from '../service'\nimport sinon from 'sinon'\n\nconst info = {\n  clientId: 1,\n  amount: 100\n}\n\ndescribe('BagService test', () => {\n  it('has a module', () => {\n    expect(BagService).toBeDefined()\n  })\n\n  describe('listBag test', () => {\n    it('lists bags informations', () => {\n      const mock = { find: sinon.spy() }\n      const bagService = BagService(mock)\n      bagService.listBag()\n      const expected = true\n      const actual = mock.find.calledOnce\n      expect(actual).toBe(expected)\n    })\n  })\n\n  describe('createBag test', () => {\n    it('create a bag informations', () => {\n      const save =  sinon.spy()\n      const mock =  function(data) {\n        return {\n          ...data,\n          save\n        }\n      }\n      const bagService = BagService(mock)\n      bagService.createBag(info)\n      const actual = save.calledOnce\n      expect(actual).toBe(true)\n    })\n\n  })\n})"],"file":"bag-service.test.js"}